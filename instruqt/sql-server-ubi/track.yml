slug: sql-server-ubi
id: vfvrxw17lxrs
type: track
title: Microsoft SQL Server on Red Hat Enterprise Linux using Red Hat Universal Base
  Image (UBI)
description: |+
  # Goal:
  After completing this scenario, users will be able to run Microsoft SQL Server
  on Red Hat Enterprise Linux(RHEL) using UBI and Red Hat container tools.

  # Concepts included in this scenario:
  * Download the container image that contains Microsoft SQL Server
  * Deploy root and rootless container instances of SQL Server on RHEL
  * Query data in SQL Server running in a container on RHEL
  * Take a checkpoint of the container, and restore the container from the checkpoint
  * Generate systemd scripts to automatically start the SQL Server containers at system boot

  # Example Use case:
  Your infrastructure team is planning on using containerized applications, and this also means
  containerized databases. They have learnt that Microsoft SQL Server 2019 offers a container image
  for Red Hat Enterprise Linux (RHEL), and they want to start using it for building applications.

icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
tags:
- rhel
owner: rhel
developers:
- dopinto@redhat.com
private: false
published: true
challenges:
- slug: step1
  id: hdtuervk24zt
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |+
      # Goal:
      After completing this scenario, users will be able to run Microsoft SQL Server
      on Red Hat Enterprise Linux(RHEL) using UBI and Red Hat container tools.

      # Concepts included in this scenario:
      * Download the container image that contains Microsoft SQL Server
      * Deploy root and rootless container instances of SQL Server on RHEL
      * Query data in SQL Server running in a container on RHEL
      * Take a checkpoint of the container, and restore the container from the checkpoint
      * Generate systemd scripts to automatically start the SQL Server containers at system boot

      # Example Use case:
      Your infrastructure team is planning on using containerized applications, and this also means
      containerized databases. They have learnt that Microsoft SQL Server 2019 offers a container image
      for Red Hat Enterprise Linux (RHEL), and they want to start using it for building applications.

  assignment: |
    # Verify the environment

    Containers are an extremely popular way for developers to deliver software today.  They are more portable and lightweight than the VM images traditionally used to package software in the cloud,  while at the same time, more consistent and efficient to deploy and patch than traditional software packages used on-premises.  Microsoft delivers SQL Server 2019 for Linux containers which are supported on Red Hat Enterprise Linux (RHEL) 8 and OpenShift 4.  These containers are built using the Red Hat Universal Base Image (UBI) runtime.  In this lab, we will demonstrate how to deploy these images on RHEL 8.

    > **NOTE:** In this scenario we assume that you understand the fundamentals about UBI and RHEL container tools. If you are not familiar with RHEL container tools (such as *podman*), you should consider reviewing the [Podman lab](https://lab.redhat.com/podman-deploy)

    There are 3 terminal tabs that will be used in this lab - a terminal on the container host (indicated by *Terminal*), a terminal where we will run the SQL Server container (indicated by *Terminal SQL Server*), and a terminal where we will run the SQL Server client tools (indicated by *Terminal SQL Client*).

    In this lab, we will be spinning up 3 instances of SQL Server, each running in a container.

    On the host system, create a directory to store the script to be used for SQL Server In-memory OLTP dataset

    ```mkdir -p /var/mssql/scripts`

    Copy the script file from the /root directory to the newly created scripts directory

    ```cp ./imoltp.sql /var/mssql/scripts/```

    > **NOTE:** In SQL Server 2019, the container runs using a non-root user by default. The default user is *mssql* with uid *10001*. Modify and
    set the appropriate user ownership for the script directory created to uid:10001 that maps to the *mssql* user.

    ```chown -R 10001:0 /var/mssql/scripts```

    Use *podman* to list the container images available on the host system

    ```podman images```

    ```
    REPOSITORY              TAG      IMAGE ID       CREATED       SIZE
    localhost/rhel8-httpd   latest   69aac470f62d   3 months ago   617 MB
    ```

    *Podman* is available on the host system, and there is only a single RHEL 8 apache image available to use.

    To run SQL Server in a container, download the SQL Server container images.
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step2
  id: srxzsmnyyljt
  type: challenge
  title: Step 2
  assignment: |
    # Download the Microsoft SQL Server container image

    With the new container image for SQL Server on Linux for RHEL 8  from Microsoft, you get the reliability, security features, and performance of SQL Server running fully supported on RHEL regardless of whether you are running on baremetal or virtual servers in private or public clouds.

    In the context of the *rhel* user, use *podman* to get the container image that includes SQL Server. The server image also includes the client tools necessary to connect to SQL Server.

    ```podman pull mcr.microsoft.com/mssql/rhel/server:2019-latest```

    Verify that the SQL Server container image is now available on the host system

    ```podman images```

    In the output, you will notice that we have a new image in the repository which is SQL Server container image (*mcr.microsoft.com/mssql/rhel/server*)

    ```
    REPOSITORY                            TAG           IMAGE ID       CREATED       SIZE
    mcr.microsoft.com/mssql/rhel/server   2019-latest   c9ce21305ef5   3 weeks ago    1.58 GB
    localhost/rhel8-httpd                 latest        69aac470f62d   3 months ago   617 MB
    ```
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step3
  id: tw6yy8pyo2jw
  type: challenge
  title: Step 3
  assignment: |
    # Multiple container instances of SQL Server


    ### Deploying a container as root user

    In the *Terminal Server* tab of the lab interface, create a container runtime using podman in the root user context - passing in-container
    access to the created script directory, and mapping the host port (1400) to the container's port (1433). TCP port *1433* is the default
    port for SQL Server.

    Pass in the flag to programatically accept the EULA agreement, and setup SQL Server with the provided sa account password.
    Set the hostname of the container to *mssqlcontainer0*

    ```podman run --name mssqlDB0 --hostname=mssqlcontainer0 -d -v /var/mssql/scripts:/var/opt/mssql/scripts:Z -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=RedHat1!' --cap-add cap_net_bind_service --cap-add CAP_SYS_ADMIN -p 1400:1433 -it mcr.microsoft.com/mssql/rhel/server:2019-latest```

    At this point, there should be a container up and running, and SQL Server should also be running using non-root (*mssql*) inside this container.

    To confirm this, run the *podman ps* command in the root context -

    ```podman ps```

    ```
    CONTAINER ID  IMAGE                                            COMMAND               CREATED        STATUS        PORTS                   NAMES
    9df179d4e116  mcr.microsoft.com/mssql/rhel/server:2019-latest  /opt/mssql/bin/sq...  4 seconds ago  Up 4 seconds ago  0.0.0.0:1400->1433/tcp  mssqlDB0
    ```

    The output of podman shows 1 running container named *mssqlDB0*

    Get the top 2 lines of the container logs for database instance 0

    ```podman logs -t mssqlDB0 | head -2```

    ```
    SQL Server 2019 will run as non-root by default.
    This container is running as user mssql.
    << OUTPUT ABRIDGED >>
    ```

    > **NOTE:** We have instantiated the container runtime using the __root__ user. However, in SQL Server 2019, the container runs using a non-root user
    (*mssql*) by default.


    ### Deploying a container as a non-root user

    Now, switch user context from the root user to the non-root __rhel__ user so that you don't use root privileges for the podman commands.

    Recall that the __rhel__ user's password is __redhat__.

    ```ssh rhel@localhost```

    Create a container runtime using podman which port maps the host port (1401) to the container's port (1433), passes the EULA flag, and sets up SQL Server with the provided sa account password. TCP port *1433* is the default port for SQL Server. The hostname of the container is set to *mssqlcontainer1*

    ```podman run --name mssqlDB1 --hostname=mssqlcontainer1 -d -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=RedHat1!' --cap-add cap_net_bind_service -p 1401:1433 -it mcr.microsoft.com/mssql/rhel/server:2019-latest```

    Similarly, spin up database instance 2 of SQL Server using podman which port maps the host port (1402) to the container's port (1433), passes the EULA flag, and sets up SQL Server with the provided sa account password. TCP port *1433* is the default port for SQL Server. The hostname of the container is set to *mssqlcontainer2*

    ```podman run --name mssqlDB2 --hostname=mssqlcontainer2 -d -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=RedHat1!' --cap-add cap_net_bind_service -p 1402:1433 -it mcr.microsoft.com/mssql/rhel/server:2019-latest`

    > **NOTE:** We have instantiated multiple container instances using a non-root *rhel* user. Additionally, in SQL Server 2019, the container runs using a non-root user (*mssql*) by default.

    Get the top 2 lines of the container logs for database instance 1

    ```podman logs -t mssqlDB1 | head -2```

    ```
    SQL Server 2019 will run as non-root by default.
    This container is running as user mssql.
    ```

    Get the top 2 lines of the container logs for database instance 2

    ```podman logs -t mssqlDB2 | head -2```

    ```
    SQL Server 2019 will run as non-root by default.
    This container is running as user mssql.
    ```

    At this point, there should be 2 non-root containers spinned up using a non-root user (*rhel*), and SQL Server should also be running using non-root (*mssql*) user inside each of the containers.

    To confirm this, run the *podman ps* command -

    ```podman ps```

    ```
    CONTAINER ID  IMAGE                                            COMMAND               CREATED         STATUS          PORTS                   NAMES
    9eaffcd5350f  mcr.microsoft.com/mssql/rhel/server:2019-latest  /opt/mssql/bin/sq...  17 seconds ago  Up 16 seconds ago  0.0.0.0:1402->1433/tcp  mssqlDB2
    9aee201922e6  mcr.microsoft.com/mssql/rhel/server:2019-latest  /opt/mssql/bin/sq...  25 seconds ago  Up 24 seconds ago  0.0.0.0:1401->1433/tcp  mssqlDB1
    ```

    The output of podman shows 2 running containers named *mssqlDB1* and *mssqlDB2*

    Exit the ssh session to go back to the root context on the host machine-

    ```exit```
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step4
  id: uuby50d1zgzd
  type: challenge
  title: Step 4
  assignment: |
    # Connect to SQL Server running in the container

    Launch an interactive bash shell in the container connecting to database instance 0 (*mssqlDB0*)

    `podman exec -it mssqlDB0 "/bin/bash"`

    Connect with *sqlcmd* and run a T-SQL statement to get the servername and the version of SQL Server running on the server

    > **NOTE:** sqlcmd is not in the path by default, so you have to specify the full path

    ```/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -Q "select @@servername, @@version"```

    ```
    -------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    mssqlcontainer0                    Microsoft SQL Server 2019 (RTM-CU8) (KB4577194) - 15.0.4073.23 (X64)
            Sep 23 2020 16:03:08
            Copyright (C) 2019 Microsoft Corporation
            Developer Edition (64-bit) on Linux (Red Hat Enterprise Linux 8.2 (Ootpa)) <X64>

    (1 rows affected)
    ```

    Verify that the hostname of the running container is *mssqlcontainer0*, and the version of SQL Server running is 2019.
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step5
  id: y17w8n3pjxsv
  type: challenge
  title: Step 5
  assignment: |+
    # Query In-Memory OLTP data in SQL Server

    Run the script to create the in-memory table and load data

    ```/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -N -C -i /var/opt/mssql/scripts/imoltp.sql```


    > Let's find out the number of total sessions in the UserSession table

    ```/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -d imoltp -N -C -Q "SELECT count(sessionID) FROM dbo.UserSession"```

    <pre class="file">
              6

    (1 rows affected)
    </pre>

    > Let's find out the UserID of the user who has the highest total price items in their shopping cart

    `/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -d imoltp -N -C -Q "SELECT top 1 UserID FROM dbo.ShoppingCart order by TotalPrice desc"
    `

    <pre class="file">
    UserID
    -----------
            342

    (1 rows affected)
    </pre>

    Exit the bash session

    `exit`

  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step6
  id: xa9ezsvgogtf
  type: challenge
  title: Step 6
  assignment: |
    # Checkpoint and restore the SQL Server container

    Podman can be used to checkpoint and restore running containers. Podman uses CRIU (Checkpoint/Restore In Userspace) to save the contents of the memory of a container (in a checkpoint file) and launch a container from the saved checkpoint file (restore). This greatly improves container portability, and reduces  application start up or cache warming time.

    To install the CRIU dependency package (__criu__) that is needed for checkpoint-restore podman functionality execute -

    ```yum -y install criu```

    <pre class="file">
    << OUTPUT ABRIDGED >>

    Updating Subscription Management repositories.
    Last metadata expiration check: 0:16:23 ago on Thu 19 Nov 2020 03:26:20 PM EST.
    Package criu-3.14-2.module+el8.3.0+8221+97165c3f.x86_64 is already installed.
    Complete!
    </pre>

    After installing the criu package, create a configuration file to adjust the maximum ghost file limit. By default, 1MB is the maximum size of a deleted file that criu can handle, but in the case of SQL Server, temporary files might exceed this limit and hence the ghost-file size must be adjusted.

    ```echo ghost-limit = 40000000 > /etc/criu.conf```

    In the *Terminal Server* tab of the lab interface, checkpoint the running SQL Server container and export the checkpoint to a compressed file

    ```podman container checkpoint -l --export=/tmp/checkpoint1.tar.gz```

    <pre class="file">
    cb88e6ff3f5e671211b000c7fa4f2006951302145885d87d50e7bbadefd85f27
    </pre>

    Taking a checkpoint without the *--leave-running* option will stop the running container. At this point, confirm that there is no running container -

    ```podman ps```

    <pre class="file">
    CONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES
    </pre>

    Now, restore the container from the stored checkpoint file. This capability can be quite useful in the case of a migration or debugging scenario.

    ```podman container restore --import=/tmp/checkpoint1.tar.gz --name mssqlserver-restored```

    <pre class="file">
    ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c
    </pre>

    Finally, verify that the container restored from the checkpoint file is running - The name of the container should be *mssqlserver-restored*

    ```podman ps```

    <pre class="file">
    CONTAINER ID  IMAGE                                            COMMAND               CREATED             STATUS                 PORTS                   NAMES
    ea72c83f945a  mcr.microsoft.com/mssql/rhel/server:2019-latest  /opt/mssql/bin/sq...  About a minute ago  Up About a minute ago  0.0.0.0:1400->1433/tcp  mssqlserver-restored
    </pre>

    Also, notice that the port mapping matches the original port mapping (Host port *1400* maps to container port *1433*).
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step7
  id: gsgahfsjy0mq
  type: challenge
  title: Step 7
  assignment: |
    # Re-query In-Memory OLTP data in SQL Server

    Launch an interactive bash shell in the *mssqlserver-restored* container -

    ```podman exec -it mssqlserver-restored "/bin/bash"```

    > Let's find out the number of total sessions in the UserSession table

    ```/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -d imoltp -N -C -Q "SELECT count(sessionID) FROM dbo.UserSession"```

    <pre class="file">
              6

    (1 rows affected)
    </pre>

    > Let's find out the UserID of the user who has the highest total price items in their shopping cart

    ```/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'RedHat1!' -d imoltp -N -C -Q "SELECT top 1 UserID FROM dbo.ShoppingCart order by TotalPrice desc"```
    

    <pre class="file">
    UserID
    -----------
            342

    (1 rows affected)
    </pre>

    The T-SQL query answers on the restored container are same as the T-SQL query answers on the container before the checkpoint was taken.
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
- slug: step8
  id: hjsq1vsot4tb
  type: challenge
  title: Step 8
  assignment: |
    # Use systemd to control and manage container processes

    Podman makes putting a container into *systemd* service simple. To generate a service for a container -

    ```podman generate systemd mssqlserver-restored > container-mssql.service```

    Now, let us take a brief look at the service file that was generated

    ```cat container-mssql.service```

    <pre class="file">
    # container-ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c.service
    # autogenerated by Podman 1.6.4
    # Wed Aug 19 04:11:19 EDT 2020

    [Unit]
    Description=Podman container-ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c.service
    Documentation=man:podman-generate-systemd(1)

    [Service]
    Restart=on-failure
    ExecStart=/usr/bin/podman start ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c
    ExecStop=/usr/bin/podman stop -t 10 ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c
    KillMode=none
    Type=forking
    PIDFile=/var/run/containers/storage/overlay-containers/ea72c83f945af03d2b03fedd21c3b6743310b7cacc77d6152f453c37cc8cf56c/userdata/conmon.pid

    [Install]
    WantedBy=multi-user.target
    </pre>

    Before we can use systemd to manage the container, lets copy over the generated service file to systemd config

    ```cp container-mssql.service /etc/systemd/system```

    The generated systemd service file can now be used to manage the container via systemd.

    Before we proceed further, reload the systemd daemon so that it picks up the newly generated service file -

    ```systemctl daemon-reload```

    Stop the SQL Server container using the `systemctl` utility -

    ```systemctl stop container-mssql.service```

    Now, enable and start the SQL Server container service using the `systemctl` utility -

    ```
    systemctl --now enable container-mssql.service
    ```

    At any point, you may also check the status of the SQL Server container service.

    ```
    systemctl status container-mssql.service --no-pager
    ```
  tabs:
  - title: Terminal
    type: terminal
    hostname: rhel
  - title: RHEL Web Console
    type: service
    hostname: rhel
    path: /
    port: 9090
  - title: Visual Editor
    type: code
    hostname: rhel
    path: /root
  difficulty: basic
  timelimit: 37
checksum: "602405987231894012"
