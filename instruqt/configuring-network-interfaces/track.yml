slug: configuring-network-interfaces
id: mwixikhawt0q
type: track
title: Configuring Network Interfaces
teaser: Learn how to apply network settings to interfaces and manage connections using Network Manager and the nmcli command.
description: |-
# Overview:

NetworkManager is a great tool for creating and modifying networks. This lab
will walk you through creating your own network connection from scratch and
modifying key parameters to control how that network connection behaves.

You will use two terminal tabs: `host01` and `host02`. You will carry out the
connection configuration on `host01`, and then at the end you will switch to
`host02` to test that the connection was successfully set up.

# Goal:

After completing this scenario, users will be able to configure the IP, hostname,
and DNS for a connection using `nmcli`.

# Concepts included in this scenario:
* Learn NetworkManager (`nmcli`) syntax
* Configure a new dynamic IP connection using DHCP
* Update this connection to use static IP address assignment
* Validate and configure DNS server settings
icon: https://cdn.instruqt.com/assets/templates/docker.png
tags: []
owner: rhel
developers:
- ehendric@redhat.com
private: true
published: false
challenges:
- slug: 01-building-an-image
  id: 1xdizznehwfk
  type: challenge
  title: Building a container image
  teaser: Learn how to build an image using a Dockerfile
  notes:
  - type: text
    contents: |
      # Learn about Docker
      Docker is an open platform for developing, shipping, and running applications.
      Docker enables you to separate your applications from your infrastructure so
      you can deliver software quickly. Containers run anywhere!

      In this first challenge, you'll create a container image. Please wait while we
      boot a virtual machine for you.
  assignment: |
    Use this command to build a Docker image using the Dockerfile in
    this directory:

    ```
    docker build -t my-service .
    ```

    Did you notice the tab with the source code editor, next to
    the terminal?

    To complete the
    challenge, press **Check**."
  tabs:
  - title: Terminal
    type: terminal
    hostname: docker-vm
  - title: Editor
    type: code
    hostname: docker-vm
    path: /app
  difficulty: basic
  timelimit: 600
- slug: 02-running-a-container
  id: 9get5hypiltq
  type: challenge
  title: Starting a container
  teaser: Start the container image you've just built
  notes:
  - type: text
    contents: |
      # Starting a container image
      Container images can be started any where a container runtime is installed.
  assignment: |-
    Now that you have built a container image, you can run it.

    ## Step 1
    Run the following command to start the container:
    ```
    docker run --name some-container -p 80:80 -d my-service
    ```

    ## Step 2
    Check the nginx tab (next the the terminal tab) to verify if the container is running.
    You should see a "Welcom to nginx" message

    ## Step 3
    To verify if the container is running using the command line, run this command:
    ```
    docker container ls
    ```

    ## Check
    To complete this track, press **Check**
  tabs:
  - title: Terminal
    type: terminal
    hostname: docker-vm
  - title: nginx
    type: service
    hostname: docker-vm
    port: 80
  difficulty: basic
  timelimit: 600
checksum: "1698503553491140591"
