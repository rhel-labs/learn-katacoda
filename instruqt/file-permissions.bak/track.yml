challenges:
- assignment: '# What are file permissions?


    File permissions determine which users can operate on files on a system.

    These operations are broken down into three categories:

    * Read: Viewing the contents of a file

    * Write: Changing the contents of a file

    * Execute: Running contents of a file as code


    Permissions function differently when applied to directories.

    Read allows users to view the contents of a directory, write allows users to

    add and delete files, and execute allows users to `cd` into that directory.


    >_NOTE:_ There are three more permissions on top of the ones explained

    above: setuid, setgid, and sticky bit. These are much less commonly used and therefore

    outside of the scope of this lab, but this article on

    [Understanding Linux File Permissions](https://www.linux.com/training-tutorials/understanding-linux-file-permissions/)

    is a great place to start if you want more information on these additional

    permissions.


    It is important to properly assign permissions to files and directories

    created on a shared system so that files are not accidentally (or maliciously)

    tampered with, destroyed, or executed. The next section shows you how to

    view the permissions of files in an example directory.


    # Displaying files and their permissions


    For this lab, several files have been created for you to work with in

    the `/srv` directory. Change to it using the `cd` (change directory) command:


    `cd /srv`{{execute T1}}


    The command `ls -l` can be used to look at the permissions associated with each

    file in the directory. The output for this can be cryptic at first, so step will

    walk you through what each character means. Take a look at the contents of the

    current directory. Use the long listing option (`-l`) to display information

    about permissions for each item.


    `ls -l`{{execute T1}}


    <pre class=file>

    drw-r-----. 2 root root  94 Jun  2 21:08 proprietary

    -rwxr-x---. 1 root root  66 Jun  2 21:08 status.sh

    -rwxr-x---. 1 root root 117 Jun  2 21:08 tasks.txt

    </pre>


    The first column of the output above is a string conveying the access mode.

    The access mode __-rwxr-x---__, seen here for the __status.sh__ file, conveys

    the following information:


    ![permission string breakdown](./assets/lsExplanation.png)


    The middle columns of the `ls` output give information about the user ownership
    and

    group ownership of the files, their size, the time last modified, and finally
    the

    file/directory name itself. The next steps will walk you through the importance

    of the file ownership fields.

    '
  difficulty: basic
  notes:
  - contents: "# Overview:\n\nIt is common for multiple users to potentially have\
      \ access to the same files.\nThis means that understanding file permissions\
      \ is a foundational skill for\nany system administrator. This lab is designed\
      \ to provide you with a basic\nunderstanding of how to control who has access\
      \ to various files on a system. \n\n# Goal:\n\nAfter completing this scenario,\
      \ users will be able to read, understand, and\nchange permissions of files and\
      \ directories on their system.\n\n# Concepts included in this scenario:\n* Learn\
      \ how to view permissions with `ls -l`\n* Explore how changing user accounts\
      \ impacts interacting with files\n* Use `chmod` to change file permissions\n\
      * Test out `chown` with example user accounts and groups\n* Learn how to use\
      \ `find` to filter files based on their permissions\n"
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 1
  type: challenge
- assignment: "# Interacting with a file from different user accounts\n\nIn this step,\
    \ you will be executing the `status.sh` script as two different\nuser accounts:\
    \ __root__, which owns the file, and __rhel__, who falls into the\n_other users_\
    \ permissions category.\nThis script prints the user who executed it, so you will\
    \ be able to\nclearly see whether or not a specific user can execute the script.\n\
    \nRecall from the previous step that __status.sh__ has the following permissions:\n\
    \n<pre class=file>\n-rwxr-x---\n</pre>\n\nTherefore, __root__ has permission to\
    \ execute this script.\n\n`./status.sh`{{execute T1}}\n\n<pre class=file>\nstatus.sh\
    \ successfully executed by root\n</pre>\n\nFocus now on line 2, the line for __status.sh__.\
    \ The first three letters of the\naccess mode show that the owner of the file\
    \ has full permissions,\n__rwx__, so the owner can read, write, and execute this\
    \ file. Users in the group\nthat owns this file have __r-x__, so they can read\
    \ and execute but cannot write to\nthis file. Finally, all other users have no\
    \ permissions, __---__, so they are\nunable to read, write, or execute this file.\
    \  \n\nTo see this in action, switch users to the __rhel__ account using the `su`\
    \ command:\n\n`su - rhel`{{execute T2}}\n\nConfirm that this command has succeeded\
    \ by looking at your bash prompt,\nthe user should be __rhel__.\n\n<pre class=file>\n\
    [rhel@0790d87edf78 ~]$\n</pre>\n\nNavigate back to the directory containing the\
    \ __status.sh__ script so that\nyou can run it as this new user.\n\n`cd /srv`{{execute\
    \ T2}}\n\nTry executing the status script as __rhel__. Since the rhel account\
    \ is not\nthe user owner of the file and is not part of any owner groups, you\
    \ are unable\nto execute this script from this user account.\n\n`./status.sh`{{execute\
    \ T2}}\n\n<pre class=file>\nbash: ./status.sh: Permission denied\n</pre>\n\nNow\
    \ that you know how files behave differently when operated on by different\nuser\
    \ accounts, the next steps will show you how to customize permissions to\ncontrol\
    \ this behavior.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 2
  type: challenge
- assignment: "# Modifying file permissions\n\nThe `chmod` command is how you modify\
    \ the permissions associated with\nfiles and directories. The `chmod` command\
    \ has two different ways to modify\npermissions: symbolic and absolute. Symbolic\
    \ permissions have the same format as\nthe access mode output of `ls -l`.\n\n\
    In this mode, you use the characters `r`, `w`, and `x` to\nset the read, write,\
    \ and execute permissions. The other mode, absolute,\ninstead uses a series of\
    \ three numbers to correspond to the permissions for\nthe owner, group, and others.\
    \ These numbers are identical in meaning to the\nsymbolic mode breakdown, they\
    \ are just more compact and therefore\nquicker to type. Here is an example of\
    \ how the two modes relate from Boolean World:\n\n![Absolute vs Symbolic permissions](./assets/absVsSym.png)\n\
    \nImage credit: Boolean World, [\"An Introduction to Linux File Permissions\"\
    ](https://www.booleanworld.com/introduction-linux-file-permissions/)\n\n>_NOTE:_\
    \ This image refers to absolute mode as numeric mode. These two terms\nare interchangeable\
    \ and you will commonly see both.\n\nThe crucial takeaway is that each character\
    \ in a symbolic permission can be converted\nto a binary number, 1 if the user\
    \ has that permission and 0 if the user does not.\nThese three binary numbers\
    \ become a single octal digit, and three such octal\ndigits compose an absolute\
    \ representation of the file's permissions.  \n\nThe upcoming sections walk through\
    \ a examples of changing permissions using\neach of these two modes.\n\n# Changing\
    \ permissions (symbolic)\n\nIn this step, you will be modifying the permissions\
    \ on the `status.sh` script\nusing symbolic syntax with the `chmod` command. In\
    \ the previous step, you were\nunable to execute __status.sh__ as __rhel__. To\
    \ change that, use the `chmod`\ncommand. The plus (`+`) operator will add any\
    \ permissions\nthat you specify, but it will not change any permissions that you\
    \ do not explicitly\nset in the command. So in this case, it will give others\
    \ read and execute access,\nbut will not change the value of write access for\
    \ the group.\nReturn to the root terminal to execute this command.\n\n`chmod o+rx\
    \ status.sh`{{execute T1}}\n\nVerify that this command succeeded using `ls -l`,\
    \ specifying that you\nwant to only look at __status.sh__.\n\n`ls -l status.sh`{{execute\
    \ T1}}\n\n<pre class=file>\n-rwxr-xr-x. 1 root root  66 Jun  2 22:42 status.sh\n\
    </pre>\n\n>_NOTE:_ Just as `o+rx` added read and execute permissions for others,\
    \ `chmod` accepts\nthe `-` argument to take away permissions. For example, `o-w`\
    \ would remove write\nprivileges from others while leaving the read and execute\
    \ values untouched.\nThe `=` argument can be used to explicitly set all permissions\
    \ symbolically.  \n\nNow the __rhel__ user will be able to read and execute __status.sh__.\n\
    Switch back to the rhel terminal and re-run the status script:\n\n`./status.sh`{{execute\
    \ T2}}\n\n<pre class=file>\nstatus.sh successfully executed by rhel\n</pre>\n\n\
    Since you added read and execute permissions, you can do more than\njust execute\
    \ this file as __rhel__. Use the `cat` command to verify that you\ncan read this\
    \ file as __rhel__.\n\n`cat status.sh`{{execute T2}}\n\n<pre class=file>\n#!/bin/bash\n\
    \necho -n \"status.sh successfully executed by \"\nwhoami\n</pre>\n\nSymbolic\
    \ mode is the more expanded permissions format which can appeal to\nnewer users.\
    \ However, the absolute mode described in the next step can\nsave on keystrokes\
    \ if you take the time to familiarize yourself with it.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 3
  type: challenge
- assignment: "# Changing permissions (absolute)\n\nNow your next goal is to modify\
    \ the permissions on __status.sh__ to keep\nfull access for the owner and group\
    \ members,\nbut prevent anyone else from writing to or executing the file. You\
    \ can do this\nwith three numbers if you use the absolute syntax.\n\nThe number\
    \ you would use to do this with `chmod` is __774__.\nThe image below explains\
    \ how the absolute permission of __774__ relates to\nthe access mode string that\
    \ is output by `ls -l`.\n\n![Absolute permission breakdown](./assets/absBreakdown.png)\n\
    \nThe owner user and owner group will have full permissions, but others will\n\
    only be able to read the file.\n\nReturn to the first terminal where you are logged\
    \ in as __root__. Use `chmod`\nto modify the permissions on __status.sh__ as discussed\
    \ above:\n\n`chmod 774 status.sh`{{execute T1}}\n\nConfirm that this change has\
    \ succeeded by checking the access mode for __status.sh__\n\n`ls -l status.sh`{{execute\
    \ T1}}\n\n<pre class=file>\n-rwxrwxr--. 1 root root  66 Jun  2 22:42 status.sh\n\
    </pre>\n\nNow, from the rhel terminal, verify that you do not have permission\
    \ to\nexecute the status script as __rhel__:\n\n`./status.sh`{{execute T2}}\n\n\
    <pre class=file>\nbash: ./status.sh: Permission denied\n</pre>\n\nHowever, if\
    \ you try to read this file, you will see you do have\nread access as __rhel__:\n\
    \n`cat /srv/status.sh`{{execute T2}}\n\n<pre class=file>\n#!/bin/bash\n\necho\
    \ -n \"status.sh successfully executed by \"\nwhoami\n</pre>\n\n>_NOTE:_ You can\
    \ use `vi` or any other write command to verify that\nyou do not have write access\
    \ as __rhel__ if you wish to verify this as well.\n\nMany users default to absolute\
    \ permissions because of how much quicker they\nare to type. If you are still\
    \ unsure exactly what these commands are doing,\nplease check out the \u201CHow\
    \ do I manage permissions?\u201D section of [this Enable Sysadmin article](https://www.redhat.com/sysadmin/manage-permissions)\
    \ to learn more.\n\nThe next step will walk you through changing which user owns\
    \ a file.\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 4
  type: challenge
- assignment: '# Changing file ownership


    Sometimes it is useful to change who owns a file so that permissions can align

    with the purpose of the file. The `chown` command can do this very easily. Just

    specify the new owner and the file you would like to change. From the root terminal,

    confirm that __root__ is the initial owner of the file __tasks.txt__:


    `ls -l tasks.txt`{{execute T1}}


    <pre class=file>

    -rwxr-x---. 1 root root 117 Jun  2 23:01 tasks.txt

    </pre>


    The third and fourth column of this output are the user and group that own the

    file. Right now, __root__ is the owner in both cases. Switch to the rhel

    terminal and attempt to read the file:


    `cat tasks.txt`{{execute T2}}


    <pre class=file>

    cat: tasks.txt: Permission denied

    </pre>


    This read operation is denied, as __rhel__ does not have read permission.

    Returning to the root terminal, change the user that owns __tasks.txt__ to __rhel__:


    `chown rhel tasks.txt`{{execute T1}}


    Repeating the search shows that the owner (column 3) has been updated:


    `ls -l tasks.txt`{{execute T1}}


    <pre class=file>

    -rwxr-x---. 1 rhel root 117 Jun  2 23:01 tasks.txt

    </pre>


    Now that __rhel__ owns the file instead of __root__, this user has permission

    to read the file without reconfiguring the access modes.


    `cat tasks.txt`{{execute T2}}


    <pre class=file>

    1. Finish this Permissions lab

    2. Do the Network Configuration Basics lab

    3. Listen to the album "New-S" by T-Square

    </pre>


    The fourth column of the `ls -l` output is the group which owns the file.

    The next step will walk you through changing group ownership.

    '
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 5
  type: challenge
- assignment: '# Changing group ownership


    Changing group ownership can be much more efficient than manually assigning owners,

    when there are many users that should have the same access to a file.

    Group ownership can be changed with the `chgrp` command by adding a colon before

    the name of the group. Return to the root terminal to execute this command:


    `chown :team tasks.txt`{{execute T1}}


    Verify the change using `ls -l`:


    `ls -l tasks.txt`{{execute T1}}


    <pre class=file>

    -rwxr-x---. 1 rhel team 117 Jun  2 23:01 tasks.txt

    </pre>


    This change is reflected in the fourth column of the `ls -l` output,

    which now says __team__ instead of __root__.


    >_NOTE:_ Some people prefer the `chgrp` command for changing groups as it has

    identical syntax to `chown`, you do not have to add a colon when using `chgrp`.

    Others prefer to use `chown` with the colon as above

    so that they do not have to remember two different commands.


    The final step in this lab will walk you through using `find` to locate any

    files that may have their permissions configured incorrectly.

    '
  difficulty: basic
  slug: step6
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 6
  type: challenge
- assignment: "# Using `find` to audit permissions\n\nThe `find` command is highly\
    \ versatile, but in this case you will be using it\nto locate files that have\
    \ permissions that may pose security risks. The `-perm`\noption causes the `find`\
    \ command to look at the access modes for each file.\nIn this case you are calling\
    \ `find` without a path, which means it will\nstart looking in the current directory.\
    \ First, check for files that\nhave the permission level __755__.\n\n`find -perm\
    \ 755`{{execute T1}}\n\nThis returns only a hidden OS file:\n\n<pre class=file>\n\
    .\n</pre>\n\n>_NOTE:_ Recall from the previous step that __755__ corresponds to\
    \ read, write,\nand execute access for the owner, and read and execute access\
    \ for everyone else.\n\nConsider a situation where you have determined that any\
    \ permissions above a certain\nlevel could pose a security issue. Adding a dash\
    \ before the permission tells\nthe `find` command to return anything with a permission\
    \ greater than or\nequal to the one you are searching for.\n\n`find -perm -755`{{execute\
    \ T1}}\n\n<pre class=file>\n.\n./proprietary/contract01.txt\n./proprietary/contract02.txt\n\
    ./proprietary/contract03.txt\n./proprietary/contract04.txt\n</pre>\n\nNotice that\
    \ this returns many more files. You may not have seen these files\nfrom the output\
    \ of `ls -l`, but `find` searches recursively so it can find\nfiles that otherwise\
    \ may slip through the cracks. The contract files in the\n __proprietary__ directory\
    \ should not be readable by everyone.\nFurthermore, since these are text files,\
    \ they should not be executable.\n\nRunning the `chmod` command with a level of\
    \ __600__ ensures that these files\nare readable and writable by the owner, but\
    \ others cannot access them.\nInstead of running `chmod` individually on each\
    \ file, you can use\nthe `find` command to execute this permission change on any\
    \ file that exceeds\na certain permission level. The `-type f` option only targets\
    \ files, so the\ndirectory permissions will remain unchanged. The `{} \\;` at\
    \ the end of the\ncommand is telling `find` to execute the `chmod` command separately\
    \ on each file\nthat matches the search criteria.  \n\n`find -perm -755 -type\
    \ f -exec chmod 600 {} \\;`{{execute T1}}\n\nTo verify that access has been removed,\
    \ try to read one of the files as the\nrhel account. Switch to the __rhel__ terminal\n\
    and run this command:\n\n`cat /srv/proprietary/contract01.txt`{{execute T2}}\n\
    \n<pre class=file>\ncat: /srv/proprietary/contract01.txt: Permission denied\n\
    </pre>\n\n>_NOTE:_ You may be tempted to use `chmod` with the recursive option\
    \ (`-R`) to\nmake this change instead of using `find`. The `chmod -R` command\
    \ modifies\nsubdirectories  as well as files, however. Since you are removing\
    \ execute\npermissions, using `chmod` recursively would lead to a situation where\
    \ you\ncould not `cd` into any of the subdirectories that you just modified. This\
    \ would\nalso prevent you from running any recursive operations to fix this issue,\
    \ and you\nwould have to manually change the permissions on each subdirectory\
    \ individually.\n\nIt is very important to double check your work when using the\
    \ `find` to\nexecute `chmod`, as running this command on the wrong directory could\
    \ lock\nusers out of all of their files.\n\nThis step is based on information\
    \ from the [Enable Sysadmin article on the topic](https://www.redhat.com/sysadmin/audit-permissions-find).\
    \ Head there for more information on increasing the specificity of what `find`\
    \ returns.  \n"
  difficulty: basic
  slug: step7
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 42
  title: Step 7
  type: challenge
description: "# Overview:\n\nIt is common for multiple users to potentially have access\
  \ to the same files.\nThis means that understanding file permissions is a foundational\
  \ skill for\nany system administrator. This lab is designed to provide you with\
  \ a basic\nunderstanding of how to control who has access to various files on a\
  \ system. \n\n# Goal:\n\nAfter completing this scenario, users will be able to read,\
  \ understand, and\nchange permissions of files and directories on their system.\n\
  \n# Concepts included in this scenario:\n* Learn how to view permissions with `ls\
  \ -l`\n* Explore how changing user accounts impacts interacting with files\n* Use\
  \ `chmod` to change file permissions\n* Test out `chown` with example user accounts\
  \ and groups\n* Learn how to use `find` to filter files based on their permissions\n"
developers:
- rhel-tmm@redhat.com
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: file-permissions
tags:
- rhel
title: Using file permissions [Admin 101]
type: track
