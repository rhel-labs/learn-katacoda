slug: managing-user-basics
id: dzzx87yukrib
type: track
title: Managing User Basics [Admin 101]
teaser: Create users and groups, adjust memberships, and recommended practices for
  disabling accounts.
description: |-
  # Overview:
  User accounts are an easy way to give users their own file storage locations, manage permissions, and track who made changes on a system. Spending some time customizing these accounts up front ensures that your system stays organized and users do not cause issues for each other.

  # Goal:
  After completing this scenario, participants will be able to create and remove user accounts, manage passwords for these user accounts, create groups and assign users to these groups, and understand how the file directory structure changes when users are added.

  # Concepts included in this scenario:
  * Create user accounts with `useradd`
  * Use `passwd` and `chage` to manage passwords
  * Create groups with `groupadd`
  * Assign users to groups with `usermod`
  * Expire accounts with `usermod`
  * Delete accounts with `userdel`
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
tags:
- rhel
- admin101
owner: rhel
developers:
- ehendric@redhat.com
private: false
published: true
skipping_enabled: true
challenges:
- slug: 01-whats-a-user-account
  id: 17fjy0blvoga
  type: challenge
  title: What is a user account?
  teaser: Working with the useradd command
  notes:
  - type: text
    contents: |-
      Linux is designed to be a multi-user system. User accounts are the segmentation method that keeps each individual from getting in each other's way.

      User accounts are tied to file permissions, meaning that users can control who has the ability to modify various files on the system. These user accounts also provide traceability if there is a file or process that is hogging system resources.
  assignment: |-
    # Creating user accounts with `useradd`

    Add a new account called __guest__ using the `useradd` command:

    ```
    useradd guest
    ```

    Confirm the account creation by examining the __passwd__ file.

    ```
    grep -w guest /etc/passwd
    ```

    <pre class=file>
    guest:x:1005:1006::/home/guest:/bin/bash
    </pre>

    Next, a password needs to be added to the user account to enable login.
  tabs:
  - title: Shell
    type: terminal
    hostname: rhel
  difficulty: basic
  timelimit: 600
- slug: 02-setting-account-password
  id: yzeg42fdlbuy
  type: challenge
  title: Setting the Account Password
  teaser: Working with the passwd and chage commands
  notes:
  - type: text
    contents: |-
      User accounts are particularly useful because they require authentication. Individuals must input a matching username and password to access a user account.

      The `passwd` command is used to configure passwords. Calling it with no arguments will default to changing the password for the account you are logged in as. With root permission, `passwd` can be called with a name of another user account to set their password.
  assignment: |-
    Like with `useradd`, you must have root access to use this command. Set the password for the guest account you created in the previous step using the following command:

    ```
    echo rhel | passwd --stdin guest
    ```

    This command will set the password in one line by using the `--stdin` option. This is useful when setting passwords inside a script or any other case when you want to avoid interactively setting the password. If you instead call `passwd guest`, you get a chance to type the password interactively to set it.

    Here you use a four-character password for simplicity, but it is best practice to select a more secure password. In fact, non-root users would be unable to use the password __rhel__ for their account because it is too short and does not contain a number or uppercase letter. Root users can bypass these guidelines if they wish.

    Validate the password by using the list (`-l`) option for the `chage` command:

    ```chage -l guest
    ```

    <pre class=file>
    Last password change                                    : Oct 21, 2021
    Password expires                                        : never
    Password inactive                                       : never
    Account expires                                         : never
    Minimum number of days between password change          : 0
    Maximum number of days between password change          : 99999
    Number of days of warning before password expires       : 7
    </pre>

    This outputs useful information about when the password was last changed, when the password expires, and how long the user will have to change their password before it becomes inactive.

    >_NOTE:_ You can view this same information with the `passwd` command using various options, but `chage -l` provides it in a much more human-readable and concise format.

    You can use the `passwd` command for many more actions, such as setting an expiration date or locking users from logging in with their password. Check out the Enable Sysadmin article [Managing Linux users with the passwd command](https://www.redhat.com/sysadmin/managing-users-passwd) for more information on these actions.
  tabs:
  - title: Shell
    type: terminal
    hostname: rhel
  difficulty: basic
  timelimit: 600
- slug: 03-adding-groups
  id: pcxkaatrea0j
  type: challenge
  title: Adding Groups
  teaser: Working with the groupadd command
  notes:
  - type: text
    contents: |-
      This next step will demonstrate how to add users to groups on a system.

      Groups are useful ways to carry out batch operations on a set of users. For example, files can be given permissions which apply to all users in the group that owns that file.
  assignment: |-
    Create a group called __viewers__ using the `groupadd` command. You will use the `-g` option to specify a group ID (GID), in this case 10000:

    ```
    groupadd -g 10000 viewers
    ```

    >_NOTE:_ Every time a new user is created, there is a primary group that is automatically generated for the user. When creating your own group, it is best practice to specify a GID that leaves room for primary groups to be be generated with the same ID as the user account. New user IDs are typically generated ascending from 1000.  Selecting a GID of 10000 in this example ensures that new user accounts will have ample space to generate their own primary group IDs that are equivalent to their user ID.

    Search for the group name in the `/etc/group` file to confirm this was successful:

    ```
    grep -w viewers /etc/group
    ```

    <pre class=file>
    viewers:x:10000:
    </pre>

    This file shows the group name, the GID, and which users belong to the group. In this case, __viewers__ does not yet have any users associated with it, but you can see the custom GID of 10000 was successfully set. Now you will see how to add users to this group.

    # Adding users to a group

    Now that you have created this group, add the __guest__ user from the previous step to the __viewers__ group using `usermod`. You will use the secondary group option (`-G`) in conjunction with the append option (`-a`) to add __viewers__ without overwriting any existing groups associated with __guest__.

    ```
    usermod -aG viewers guest
    ```

    The `groups` command is useful for validating this change, because it lists all groups associated with a user:

    ```
    groups guest
    ```

    <pre class=file>
    guest : guest viewers
    </pre>

    The __viewers__ group has been added alongside the account's primary group (__guest__).

    >_NOTE:_ Using the secondary group option (`-G`) adds __viewers__ as a _secondary group_ for the __guest__ user. Users can have any number of secondary groups. If you instead wanted to replace the primary group for __guest__, use `-g` when calling `groupadd`. You cannot use `-a` to append a primary group, as users can only have one primary group.
  tabs:
  - title: Shell
    type: terminal
    hostname: rhel
  difficulty: basic
  timelimit: 600
- slug: 04-removing-groups
  id: j3vufyz08aoi
  type: challenge
  title: Removing Groups
  teaser: Working with the `gpasswd` and `groupdel` commands
  notes:
  - type: text
    contents: In this next step you will practice removing user accounts from groups.
  assignment: |-
    # Removing a user for a group

    If you want to remove a user from a group without deleting the group, run the following command:

    ```
    gpasswd -d guest viewers
    ```

    <pre class=file>
    Removing user guest from group viewers
    </pre>

    >_NOTE:_ This change will not take effect until the user logs in again.

    # Deleting a group

    If instead you want to delete the group all together, run the `groupdel` command as root.

    ```
    groupdel viewers
    ```

     If you are trying to remove the primary group of a user, you must remove that user first.

    Attempting to add a user to this group will print an error message showing that it now does not exist.

    ```
    usermod -aG viewers guest
    ```

    <pre class=file>
    usermod: group 'viewers' does not exist
    </pre>
  tabs:
  - title: Shell
    type: terminal
    hostname: rhel
  difficulty: basic
  timelimit: 600
- slug: 05-removing-users
  id: eltbbsrgt6jb
  type: challenge
  title: Removing Users
  teaser: Working with the `usermod` and `userdel` commands
  notes:
  - type: text
    contents: |-
      In this final step, you will walk through the process of removing a user from the system.

      If a user is leaving your organization, you will want to disable an account. Unlike deleting the account, this maintains their files and account information, but prevents them from accessing the system using their credentials.
  assignment: |-
    The `usermod` command has a lock password option (`-L`) which informs the system to stop accepting a user's login attempts.

    ```
    usermod -L guest
    ```

    This operation does not have an output, but calling `passwd` with the summary option (`-S`) allows you to confirm this change.

    ```
    passwd -S guest
    ```

    <pre class=file>
    guest LK 2021-10-21 0 99999 7 -1 (Password locked.)
    </pre>

    After expiring this account, __root__ will still be able to log in. However, no other user will be able to access __guest__.

    >_Note:_ If you prefer, `chage` can accomplish this same functionality. Run `chage` with no arguments to see a summary of the account access features this command provides.

    # Deleting a user account

    Sometimes you may want to do more than just disable the account. Deleting a user is very similar to deleting a group. Running `userdel guest` removes the __guest__ account from the system. It is often the case that you would also want to delete this user's home directory. This avoids a new user account inheriting __guest__'s files when the new account inherits the user ID that used to belong to __guest__. If you do wish to delete the home directory along with the account, first back up __guest__'s files. Then, add the `-r` option to specify that you wish to delete the user's home directory along with the user account.

    ```
    userdel -r guest
    ```

    Try logging in as __guest__ to confirm the account deletion:

    ```
    su - guest
    ```

    <pre class=file>
    su: user guest does not exist
    </pre>

    Also confirm that the __guest__ home directory has been deleted:

    ```
    ls /home/guest
    ```

    <pre class=file>
    ls: cannot access '/home/guest': No such file or directory
    </pre>

    >_NOTE:_ If you try to delete a user that still has active processes, you will get the error displayed below. You must kill this user's processes and try again.

    <pre class=file>
    userdel: user guest is currently used by process 1909
    </pre>
  tabs:
  - title: Shell
    type: terminal
    hostname: rhel
  difficulty: basic
  timelimit: 600
checksum: "13519785746611325336"
